# -*- coding: utf-8 -*-
#
# Copyright (c) ZeroC, Inc. All rights reserved.
#
#
# Ice version 3.7.10
#
# <auto-generated>
#
# Generated from file `smarthome.ice'
#
# Warning: do not edit this file.
#
# </auto-generated>
#

from sys import version_info as _version_info_
import Ice, IcePy

# Start of module SmartHome
_M_SmartHome = Ice.openModule('SmartHome')
__name__ = 'SmartHome'

if 'DeviceState' not in _M_SmartHome.__dict__:
    _M_SmartHome.DeviceState = Ice.createTempClass()
    class DeviceState(Ice.EnumBase):

        def __init__(self, _n, _v):
            Ice.EnumBase.__init__(self, _n, _v)

        def valueOf(self, _n):
            if _n in self._enumerators:
                return self._enumerators[_n]
            return None
        valueOf = classmethod(valueOf)

    DeviceState.on = DeviceState("on", 0)
    DeviceState.off = DeviceState("off", 1)
    DeviceState._enumerators = { 0:DeviceState.on, 1:DeviceState.off }

    _M_SmartHome._t_DeviceState = IcePy.defineEnum('::SmartHome::DeviceState', DeviceState, (), DeviceState._enumerators)

    _M_SmartHome.DeviceState = DeviceState
    del DeviceState

if 'DeviceOff' not in _M_SmartHome.__dict__:
    _M_SmartHome.DeviceOff = Ice.createTempClass()
    class DeviceOff(Ice.UserException):
        def __init__(self):
            pass

        def __str__(self):
            return IcePy.stringifyException(self)

        __repr__ = __str__

        _ice_id = '::SmartHome::DeviceOff'

    _M_SmartHome._t_DeviceOff = IcePy.defineException('::SmartHome::DeviceOff', DeviceOff, (), False, None, ())
    DeviceOff._ice_type = _M_SmartHome._t_DeviceOff

    _M_SmartHome.DeviceOff = DeviceOff
    del DeviceOff

_M_SmartHome._t_IoTDevice = IcePy.defineValue('::SmartHome::IoTDevice', Ice.Value, -1, (), False, True, None, ())

if 'IoTDevicePrx' not in _M_SmartHome.__dict__:
    _M_SmartHome.IoTDevicePrx = Ice.createTempClass()
    class IoTDevicePrx(Ice.ObjectPrx):

        def getState(self, context=None):
            return _M_SmartHome.IoTDevice._op_getState.invoke(self, ((), context))

        def getStateAsync(self, context=None):
            return _M_SmartHome.IoTDevice._op_getState.invokeAsync(self, ((), context))

        def begin_getState(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_SmartHome.IoTDevice._op_getState.begin(self, ((), _response, _ex, _sent, context))

        def end_getState(self, _r):
            return _M_SmartHome.IoTDevice._op_getState.end(self, _r)

        def setState(self, newState, context=None):
            return _M_SmartHome.IoTDevice._op_setState.invoke(self, ((newState, ), context))

        def setStateAsync(self, newState, context=None):
            return _M_SmartHome.IoTDevice._op_setState.invokeAsync(self, ((newState, ), context))

        def begin_setState(self, newState, _response=None, _ex=None, _sent=None, context=None):
            return _M_SmartHome.IoTDevice._op_setState.begin(self, ((newState, ), _response, _ex, _sent, context))

        def end_setState(self, _r):
            return _M_SmartHome.IoTDevice._op_setState.end(self, _r)

        def assureOn(self, context=None):
            return _M_SmartHome.IoTDevice._op_assureOn.invoke(self, ((), context))

        def assureOnAsync(self, context=None):
            return _M_SmartHome.IoTDevice._op_assureOn.invokeAsync(self, ((), context))

        def begin_assureOn(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_SmartHome.IoTDevice._op_assureOn.begin(self, ((), _response, _ex, _sent, context))

        def end_assureOn(self, _r):
            return _M_SmartHome.IoTDevice._op_assureOn.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_SmartHome.IoTDevicePrx.ice_checkedCast(proxy, '::SmartHome::IoTDevice', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_SmartHome.IoTDevicePrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::SmartHome::IoTDevice'
    _M_SmartHome._t_IoTDevicePrx = IcePy.defineProxy('::SmartHome::IoTDevice', IoTDevicePrx)

    _M_SmartHome.IoTDevicePrx = IoTDevicePrx
    del IoTDevicePrx

    _M_SmartHome.IoTDevice = Ice.createTempClass()
    class IoTDevice(Ice.Object):

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::SmartHome::IoTDevice')

        def ice_id(self, current=None):
            return '::SmartHome::IoTDevice'

        @staticmethod
        def ice_staticId():
            return '::SmartHome::IoTDevice'

        def getState(self, current=None):
            raise NotImplementedError("servant method 'getState' not implemented")

        def setState(self, newState, current=None):
            raise NotImplementedError("servant method 'setState' not implemented")

        def assureOn(self, current=None):
            raise NotImplementedError("servant method 'assureOn' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_SmartHome._t_IoTDeviceDisp)

        __repr__ = __str__

    _M_SmartHome._t_IoTDeviceDisp = IcePy.defineClass('::SmartHome::IoTDevice', IoTDevice, (), None, ())
    IoTDevice._ice_type = _M_SmartHome._t_IoTDeviceDisp

    IoTDevice._op_getState = IcePy.Operation('getState', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (), (), ((), _M_SmartHome._t_DeviceState, False, 0), ())
    IoTDevice._op_setState = IcePy.Operation('setState', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (((), _M_SmartHome._t_DeviceState, False, 0),), (), ((), _M_SmartHome._t_DeviceState, False, 0), ())
    IoTDevice._op_assureOn = IcePy.Operation('assureOn', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), None, (_M_SmartHome._t_DeviceOff,))

    _M_SmartHome.IoTDevice = IoTDevice
    del IoTDevice

if 'DoorState' not in _M_SmartHome.__dict__:
    _M_SmartHome.DoorState = Ice.createTempClass()
    class DoorState(Ice.EnumBase):

        def __init__(self, _n, _v):
            Ice.EnumBase.__init__(self, _n, _v)

        def valueOf(self, _n):
            if _n in self._enumerators:
                return self._enumerators[_n]
            return None
        valueOf = classmethod(valueOf)

    DoorState.opening = DoorState("opening", 0)
    DoorState.opened = DoorState("opened", 1)
    DoorState.closing = DoorState("closing", 2)
    DoorState.closed = DoorState("closed", 3)
    DoorState._enumerators = { 0:DoorState.opening, 1:DoorState.opened, 2:DoorState.closing, 3:DoorState.closed }

    _M_SmartHome._t_DoorState = IcePy.defineEnum('::SmartHome::DoorState', DoorState, (), DoorState._enumerators)

    _M_SmartHome.DoorState = DoorState
    del DoorState

if 'CannotLockOpened' not in _M_SmartHome.__dict__:
    _M_SmartHome.CannotLockOpened = Ice.createTempClass()
    class CannotLockOpened(Ice.UserException):
        def __init__(self):
            pass

        def __str__(self):
            return IcePy.stringifyException(self)

        __repr__ = __str__

        _ice_id = '::SmartHome::CannotLockOpened'

    _M_SmartHome._t_CannotLockOpened = IcePy.defineException('::SmartHome::CannotLockOpened', CannotLockOpened, (), False, None, ())
    CannotLockOpened._ice_type = _M_SmartHome._t_CannotLockOpened

    _M_SmartHome.CannotLockOpened = CannotLockOpened
    del CannotLockOpened

if 'DoorsMoving' not in _M_SmartHome.__dict__:
    _M_SmartHome.DoorsMoving = Ice.createTempClass()
    class DoorsMoving(Ice.UserException):
        def __init__(self):
            pass

        def __str__(self):
            return IcePy.stringifyException(self)

        __repr__ = __str__

        _ice_id = '::SmartHome::DoorsMoving'

    _M_SmartHome._t_DoorsMoving = IcePy.defineException('::SmartHome::DoorsMoving', DoorsMoving, (), False, None, ())
    DoorsMoving._ice_type = _M_SmartHome._t_DoorsMoving

    _M_SmartHome.DoorsMoving = DoorsMoving
    del DoorsMoving

_M_SmartHome._t_SmartLock = IcePy.defineValue('::SmartHome::SmartLock', Ice.Value, -1, (), False, True, None, ())

if 'SmartLockPrx' not in _M_SmartHome.__dict__:
    _M_SmartHome.SmartLockPrx = Ice.createTempClass()
    class SmartLockPrx(_M_SmartHome.IoTDevicePrx):

        def lock(self, context=None):
            return _M_SmartHome.SmartLock._op_lock.invoke(self, ((), context))

        def lockAsync(self, context=None):
            return _M_SmartHome.SmartLock._op_lock.invokeAsync(self, ((), context))

        def begin_lock(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_SmartHome.SmartLock._op_lock.begin(self, ((), _response, _ex, _sent, context))

        def end_lock(self, _r):
            return _M_SmartHome.SmartLock._op_lock.end(self, _r)

        def unlock(self, context=None):
            return _M_SmartHome.SmartLock._op_unlock.invoke(self, ((), context))

        def unlockAsync(self, context=None):
            return _M_SmartHome.SmartLock._op_unlock.invokeAsync(self, ((), context))

        def begin_unlock(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_SmartHome.SmartLock._op_unlock.begin(self, ((), _response, _ex, _sent, context))

        def end_unlock(self, _r):
            return _M_SmartHome.SmartLock._op_unlock.end(self, _r)

        def isLocked(self, context=None):
            return _M_SmartHome.SmartLock._op_isLocked.invoke(self, ((), context))

        def isLockedAsync(self, context=None):
            return _M_SmartHome.SmartLock._op_isLocked.invokeAsync(self, ((), context))

        def begin_isLocked(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_SmartHome.SmartLock._op_isLocked.begin(self, ((), _response, _ex, _sent, context))

        def end_isLocked(self, _r):
            return _M_SmartHome.SmartLock._op_isLocked.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_SmartHome.SmartLockPrx.ice_checkedCast(proxy, '::SmartHome::SmartLock', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_SmartHome.SmartLockPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::SmartHome::SmartLock'
    _M_SmartHome._t_SmartLockPrx = IcePy.defineProxy('::SmartHome::SmartLock', SmartLockPrx)

    _M_SmartHome.SmartLockPrx = SmartLockPrx
    del SmartLockPrx

    _M_SmartHome.SmartLock = Ice.createTempClass()
    class SmartLock(_M_SmartHome.IoTDevice):

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::SmartHome::IoTDevice', '::SmartHome::SmartLock')

        def ice_id(self, current=None):
            return '::SmartHome::SmartLock'

        @staticmethod
        def ice_staticId():
            return '::SmartHome::SmartLock'

        def lock(self, current=None):
            raise NotImplementedError("servant method 'lock' not implemented")

        def unlock(self, current=None):
            raise NotImplementedError("servant method 'unlock' not implemented")

        def isLocked(self, current=None):
            raise NotImplementedError("servant method 'isLocked' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_SmartHome._t_SmartLockDisp)

        __repr__ = __str__

    _M_SmartHome._t_SmartLockDisp = IcePy.defineClass('::SmartHome::SmartLock', SmartLock, (), None, (_M_SmartHome._t_IoTDeviceDisp,))
    SmartLock._ice_type = _M_SmartHome._t_SmartLockDisp

    SmartLock._op_lock = IcePy.Operation('lock', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), None, (_M_SmartHome._t_DeviceOff, _M_SmartHome._t_CannotLockOpened, _M_SmartHome._t_DoorsMoving))
    SmartLock._op_unlock = IcePy.Operation('unlock', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), None, (_M_SmartHome._t_DeviceOff, _M_SmartHome._t_DoorsMoving))
    SmartLock._op_isLocked = IcePy.Operation('isLocked', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (), (), ((), IcePy._t_bool, False, 0), (_M_SmartHome._t_DeviceOff,))

    _M_SmartHome.SmartLock = SmartLock
    del SmartLock

if 'DoorsLocked' not in _M_SmartHome.__dict__:
    _M_SmartHome.DoorsLocked = Ice.createTempClass()
    class DoorsLocked(Ice.UserException):
        def __init__(self):
            pass

        def __str__(self):
            return IcePy.stringifyException(self)

        __repr__ = __str__

        _ice_id = '::SmartHome::DoorsLocked'

    _M_SmartHome._t_DoorsLocked = IcePy.defineException('::SmartHome::DoorsLocked', DoorsLocked, (), False, None, ())
    DoorsLocked._ice_type = _M_SmartHome._t_DoorsLocked

    _M_SmartHome.DoorsLocked = DoorsLocked
    del DoorsLocked

_M_SmartHome._t_SmartDoor = IcePy.defineValue('::SmartHome::SmartDoor', Ice.Value, -1, (), False, True, None, ())

if 'SmartDoorPrx' not in _M_SmartHome.__dict__:
    _M_SmartHome.SmartDoorPrx = Ice.createTempClass()
    class SmartDoorPrx(_M_SmartHome.SmartLockPrx):

        def open(self, context=None):
            return _M_SmartHome.SmartDoor._op_open.invoke(self, ((), context))

        def openAsync(self, context=None):
            return _M_SmartHome.SmartDoor._op_open.invokeAsync(self, ((), context))

        def begin_open(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_SmartHome.SmartDoor._op_open.begin(self, ((), _response, _ex, _sent, context))

        def end_open(self, _r):
            return _M_SmartHome.SmartDoor._op_open.end(self, _r)

        def unlockOpen(self, context=None):
            return _M_SmartHome.SmartDoor._op_unlockOpen.invoke(self, ((), context))

        def unlockOpenAsync(self, context=None):
            return _M_SmartHome.SmartDoor._op_unlockOpen.invokeAsync(self, ((), context))

        def begin_unlockOpen(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_SmartHome.SmartDoor._op_unlockOpen.begin(self, ((), _response, _ex, _sent, context))

        def end_unlockOpen(self, _r):
            return _M_SmartHome.SmartDoor._op_unlockOpen.end(self, _r)

        def close(self, context=None):
            return _M_SmartHome.SmartDoor._op_close.invoke(self, ((), context))

        def closeAsync(self, context=None):
            return _M_SmartHome.SmartDoor._op_close.invokeAsync(self, ((), context))

        def begin_close(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_SmartHome.SmartDoor._op_close.begin(self, ((), _response, _ex, _sent, context))

        def end_close(self, _r):
            return _M_SmartHome.SmartDoor._op_close.end(self, _r)

        def closeLock(self, context=None):
            return _M_SmartHome.SmartDoor._op_closeLock.invoke(self, ((), context))

        def closeLockAsync(self, context=None):
            return _M_SmartHome.SmartDoor._op_closeLock.invokeAsync(self, ((), context))

        def begin_closeLock(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_SmartHome.SmartDoor._op_closeLock.begin(self, ((), _response, _ex, _sent, context))

        def end_closeLock(self, _r):
            return _M_SmartHome.SmartDoor._op_closeLock.end(self, _r)

        def isOpen(self, context=None):
            return _M_SmartHome.SmartDoor._op_isOpen.invoke(self, ((), context))

        def isOpenAsync(self, context=None):
            return _M_SmartHome.SmartDoor._op_isOpen.invokeAsync(self, ((), context))

        def begin_isOpen(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_SmartHome.SmartDoor._op_isOpen.begin(self, ((), _response, _ex, _sent, context))

        def end_isOpen(self, _r):
            return _M_SmartHome.SmartDoor._op_isOpen.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_SmartHome.SmartDoorPrx.ice_checkedCast(proxy, '::SmartHome::SmartDoor', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_SmartHome.SmartDoorPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::SmartHome::SmartDoor'
    _M_SmartHome._t_SmartDoorPrx = IcePy.defineProxy('::SmartHome::SmartDoor', SmartDoorPrx)

    _M_SmartHome.SmartDoorPrx = SmartDoorPrx
    del SmartDoorPrx

    _M_SmartHome.SmartDoor = Ice.createTempClass()
    class SmartDoor(_M_SmartHome.SmartLock):

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::SmartHome::IoTDevice', '::SmartHome::SmartDoor', '::SmartHome::SmartLock')

        def ice_id(self, current=None):
            return '::SmartHome::SmartDoor'

        @staticmethod
        def ice_staticId():
            return '::SmartHome::SmartDoor'

        def open(self, current=None):
            raise NotImplementedError("servant method 'open' not implemented")

        def unlockOpen(self, current=None):
            raise NotImplementedError("servant method 'unlockOpen' not implemented")

        def close(self, current=None):
            raise NotImplementedError("servant method 'close' not implemented")

        def closeLock(self, current=None):
            raise NotImplementedError("servant method 'closeLock' not implemented")

        def isOpen(self, current=None):
            raise NotImplementedError("servant method 'isOpen' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_SmartHome._t_SmartDoorDisp)

        __repr__ = __str__

    _M_SmartHome._t_SmartDoorDisp = IcePy.defineClass('::SmartHome::SmartDoor', SmartDoor, (), None, (_M_SmartHome._t_SmartLockDisp,))
    SmartDoor._ice_type = _M_SmartHome._t_SmartDoorDisp

    SmartDoor._op_open = IcePy.Operation('open', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), None, (_M_SmartHome._t_DeviceOff, _M_SmartHome._t_DoorsMoving, _M_SmartHome._t_DoorsLocked))
    SmartDoor._op_unlockOpen = IcePy.Operation('unlockOpen', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), None, (_M_SmartHome._t_DeviceOff, _M_SmartHome._t_DoorsMoving))
    SmartDoor._op_close = IcePy.Operation('close', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), None, (_M_SmartHome._t_DeviceOff, _M_SmartHome._t_DoorsMoving))
    SmartDoor._op_closeLock = IcePy.Operation('closeLock', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), None, (_M_SmartHome._t_DeviceOff, _M_SmartHome._t_DoorsMoving))
    SmartDoor._op_isOpen = IcePy.Operation('isOpen', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), ((), IcePy._t_bool, False, 0), (_M_SmartHome._t_DeviceOff,))

    _M_SmartHome.SmartDoor = SmartDoor
    del SmartDoor

if 'LightOnState' not in _M_SmartHome.__dict__:
    _M_SmartHome.LightOnState = Ice.createTempClass()
    class LightOnState(Ice.EnumBase):

        def __init__(self, _n, _v):
            Ice.EnumBase.__init__(self, _n, _v)

        def valueOf(self, _n):
            if _n in self._enumerators:
                return self._enumerators[_n]
            return None
        valueOf = classmethod(valueOf)

    LightOnState.on = LightOnState("on", 0)
    LightOnState.off = LightOnState("off", 1)
    LightOnState._enumerators = { 0:LightOnState.on, 1:LightOnState.off }

    _M_SmartHome._t_LightOnState = IcePy.defineEnum('::SmartHome::LightOnState', LightOnState, (), LightOnState._enumerators)

    _M_SmartHome.LightOnState = LightOnState
    del LightOnState

_M_SmartHome._t_SmartLight = IcePy.defineValue('::SmartHome::SmartLight', Ice.Value, -1, (), False, True, None, ())

if 'SmartLightPrx' not in _M_SmartHome.__dict__:
    _M_SmartHome.SmartLightPrx = Ice.createTempClass()
    class SmartLightPrx(_M_SmartHome.IoTDevicePrx):

        def setOn(self, newState, context=None):
            return _M_SmartHome.SmartLight._op_setOn.invoke(self, ((newState, ), context))

        def setOnAsync(self, newState, context=None):
            return _M_SmartHome.SmartLight._op_setOn.invokeAsync(self, ((newState, ), context))

        def begin_setOn(self, newState, _response=None, _ex=None, _sent=None, context=None):
            return _M_SmartHome.SmartLight._op_setOn.begin(self, ((newState, ), _response, _ex, _sent, context))

        def end_setOn(self, _r):
            return _M_SmartHome.SmartLight._op_setOn.end(self, _r)

        def getOn(self, context=None):
            return _M_SmartHome.SmartLight._op_getOn.invoke(self, ((), context))

        def getOnAsync(self, context=None):
            return _M_SmartHome.SmartLight._op_getOn.invokeAsync(self, ((), context))

        def begin_getOn(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_SmartHome.SmartLight._op_getOn.begin(self, ((), _response, _ex, _sent, context))

        def end_getOn(self, _r):
            return _M_SmartHome.SmartLight._op_getOn.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_SmartHome.SmartLightPrx.ice_checkedCast(proxy, '::SmartHome::SmartLight', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_SmartHome.SmartLightPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::SmartHome::SmartLight'
    _M_SmartHome._t_SmartLightPrx = IcePy.defineProxy('::SmartHome::SmartLight', SmartLightPrx)

    _M_SmartHome.SmartLightPrx = SmartLightPrx
    del SmartLightPrx

    _M_SmartHome.SmartLight = Ice.createTempClass()
    class SmartLight(_M_SmartHome.IoTDevice):

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::SmartHome::IoTDevice', '::SmartHome::SmartLight')

        def ice_id(self, current=None):
            return '::SmartHome::SmartLight'

        @staticmethod
        def ice_staticId():
            return '::SmartHome::SmartLight'

        def setOn(self, newState, current=None):
            raise NotImplementedError("servant method 'setOn' not implemented")

        def getOn(self, current=None):
            raise NotImplementedError("servant method 'getOn' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_SmartHome._t_SmartLightDisp)

        __repr__ = __str__

    _M_SmartHome._t_SmartLightDisp = IcePy.defineClass('::SmartHome::SmartLight', SmartLight, (), None, (_M_SmartHome._t_IoTDeviceDisp,))
    SmartLight._ice_type = _M_SmartHome._t_SmartLightDisp

    SmartLight._op_setOn = IcePy.Operation('setOn', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (((), _M_SmartHome._t_LightOnState, False, 0),), (), ((), _M_SmartHome._t_LightOnState, False, 0), (_M_SmartHome._t_DeviceOff,))
    SmartLight._op_getOn = IcePy.Operation('getOn', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (), (), ((), _M_SmartHome._t_LightOnState, False, 0), (_M_SmartHome._t_DeviceOff,))

    _M_SmartHome.SmartLight = SmartLight
    del SmartLight

_M_SmartHome._t_AdjustableSmartLight = IcePy.defineValue('::SmartHome::AdjustableSmartLight', Ice.Value, -1, (), False, True, None, ())

if 'AdjustableSmartLightPrx' not in _M_SmartHome.__dict__:
    _M_SmartHome.AdjustableSmartLightPrx = Ice.createTempClass()
    class AdjustableSmartLightPrx(_M_SmartHome.SmartLightPrx):

        def setBrightness(self, newBrightness, context=None):
            return _M_SmartHome.AdjustableSmartLight._op_setBrightness.invoke(self, ((newBrightness, ), context))

        def setBrightnessAsync(self, newBrightness, context=None):
            return _M_SmartHome.AdjustableSmartLight._op_setBrightness.invokeAsync(self, ((newBrightness, ), context))

        def begin_setBrightness(self, newBrightness, _response=None, _ex=None, _sent=None, context=None):
            return _M_SmartHome.AdjustableSmartLight._op_setBrightness.begin(self, ((newBrightness, ), _response, _ex, _sent, context))

        def end_setBrightness(self, _r):
            return _M_SmartHome.AdjustableSmartLight._op_setBrightness.end(self, _r)

        def getBrightness(self, context=None):
            return _M_SmartHome.AdjustableSmartLight._op_getBrightness.invoke(self, ((), context))

        def getBrightnessAsync(self, context=None):
            return _M_SmartHome.AdjustableSmartLight._op_getBrightness.invokeAsync(self, ((), context))

        def begin_getBrightness(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_SmartHome.AdjustableSmartLight._op_getBrightness.begin(self, ((), _response, _ex, _sent, context))

        def end_getBrightness(self, _r):
            return _M_SmartHome.AdjustableSmartLight._op_getBrightness.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_SmartHome.AdjustableSmartLightPrx.ice_checkedCast(proxy, '::SmartHome::AdjustableSmartLight', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_SmartHome.AdjustableSmartLightPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::SmartHome::AdjustableSmartLight'
    _M_SmartHome._t_AdjustableSmartLightPrx = IcePy.defineProxy('::SmartHome::AdjustableSmartLight', AdjustableSmartLightPrx)

    _M_SmartHome.AdjustableSmartLightPrx = AdjustableSmartLightPrx
    del AdjustableSmartLightPrx

    _M_SmartHome.AdjustableSmartLight = Ice.createTempClass()
    class AdjustableSmartLight(_M_SmartHome.SmartLight):

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::SmartHome::AdjustableSmartLight', '::SmartHome::IoTDevice', '::SmartHome::SmartLight')

        def ice_id(self, current=None):
            return '::SmartHome::AdjustableSmartLight'

        @staticmethod
        def ice_staticId():
            return '::SmartHome::AdjustableSmartLight'

        def setBrightness(self, newBrightness, current=None):
            raise NotImplementedError("servant method 'setBrightness' not implemented")

        def getBrightness(self, current=None):
            raise NotImplementedError("servant method 'getBrightness' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_SmartHome._t_AdjustableSmartLightDisp)

        __repr__ = __str__

    _M_SmartHome._t_AdjustableSmartLightDisp = IcePy.defineClass('::SmartHome::AdjustableSmartLight', AdjustableSmartLight, (), None, (_M_SmartHome._t_SmartLightDisp,))
    AdjustableSmartLight._ice_type = _M_SmartHome._t_AdjustableSmartLightDisp

    AdjustableSmartLight._op_setBrightness = IcePy.Operation('setBrightness', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (((), IcePy._t_float, False, 0),), (), ((), IcePy._t_float, False, 0), (_M_SmartHome._t_DeviceOff,))
    AdjustableSmartLight._op_getBrightness = IcePy.Operation('getBrightness', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (), (), ((), IcePy._t_float, False, 0), (_M_SmartHome._t_DeviceOff,))

    _M_SmartHome.AdjustableSmartLight = AdjustableSmartLight
    del AdjustableSmartLight

if 'ColorRGB' not in _M_SmartHome.__dict__:
    _M_SmartHome.ColorRGB = Ice.createTempClass()
    class ColorRGB(object):
        def __init__(self, r=0.0, g=0.0, b=0.0):
            self.r = r
            self.g = g
            self.b = b

        def __eq__(self, other):
            if other is None:
                return False
            elif not isinstance(other, _M_SmartHome.ColorRGB):
                return NotImplemented
            else:
                if self.r != other.r:
                    return False
                if self.g != other.g:
                    return False
                if self.b != other.b:
                    return False
                return True

        def __ne__(self, other):
            return not self.__eq__(other)

        def __str__(self):
            return IcePy.stringify(self, _M_SmartHome._t_ColorRGB)

        __repr__ = __str__

    _M_SmartHome._t_ColorRGB = IcePy.defineStruct('::SmartHome::ColorRGB', ColorRGB, (), (
        ('r', (), IcePy._t_float),
        ('g', (), IcePy._t_float),
        ('b', (), IcePy._t_float)
    ))

    _M_SmartHome.ColorRGB = ColorRGB
    del ColorRGB

_M_SmartHome._t_RGBSmartLight = IcePy.defineValue('::SmartHome::RGBSmartLight', Ice.Value, -1, (), False, True, None, ())

if 'RGBSmartLightPrx' not in _M_SmartHome.__dict__:
    _M_SmartHome.RGBSmartLightPrx = Ice.createTempClass()
    class RGBSmartLightPrx(_M_SmartHome.SmartLightPrx):

        def getColor(self, context=None):
            return _M_SmartHome.RGBSmartLight._op_getColor.invoke(self, ((), context))

        def getColorAsync(self, context=None):
            return _M_SmartHome.RGBSmartLight._op_getColor.invokeAsync(self, ((), context))

        def begin_getColor(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_SmartHome.RGBSmartLight._op_getColor.begin(self, ((), _response, _ex, _sent, context))

        def end_getColor(self, _r):
            return _M_SmartHome.RGBSmartLight._op_getColor.end(self, _r)

        def setColor(self, color, context=None):
            return _M_SmartHome.RGBSmartLight._op_setColor.invoke(self, ((color, ), context))

        def setColorAsync(self, color, context=None):
            return _M_SmartHome.RGBSmartLight._op_setColor.invokeAsync(self, ((color, ), context))

        def begin_setColor(self, color, _response=None, _ex=None, _sent=None, context=None):
            return _M_SmartHome.RGBSmartLight._op_setColor.begin(self, ((color, ), _response, _ex, _sent, context))

        def end_setColor(self, _r):
            return _M_SmartHome.RGBSmartLight._op_setColor.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_SmartHome.RGBSmartLightPrx.ice_checkedCast(proxy, '::SmartHome::RGBSmartLight', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_SmartHome.RGBSmartLightPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::SmartHome::RGBSmartLight'
    _M_SmartHome._t_RGBSmartLightPrx = IcePy.defineProxy('::SmartHome::RGBSmartLight', RGBSmartLightPrx)

    _M_SmartHome.RGBSmartLightPrx = RGBSmartLightPrx
    del RGBSmartLightPrx

    _M_SmartHome.RGBSmartLight = Ice.createTempClass()
    class RGBSmartLight(_M_SmartHome.SmartLight):

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::SmartHome::IoTDevice', '::SmartHome::RGBSmartLight', '::SmartHome::SmartLight')

        def ice_id(self, current=None):
            return '::SmartHome::RGBSmartLight'

        @staticmethod
        def ice_staticId():
            return '::SmartHome::RGBSmartLight'

        def getColor(self, current=None):
            raise NotImplementedError("servant method 'getColor' not implemented")

        def setColor(self, color, current=None):
            raise NotImplementedError("servant method 'setColor' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_SmartHome._t_RGBSmartLightDisp)

        __repr__ = __str__

    _M_SmartHome._t_RGBSmartLightDisp = IcePy.defineClass('::SmartHome::RGBSmartLight', RGBSmartLight, (), None, (_M_SmartHome._t_SmartLightDisp,))
    RGBSmartLight._ice_type = _M_SmartHome._t_RGBSmartLightDisp

    RGBSmartLight._op_getColor = IcePy.Operation('getColor', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (), (), ((), _M_SmartHome._t_ColorRGB, False, 0), (_M_SmartHome._t_DeviceOff,))
    RGBSmartLight._op_setColor = IcePy.Operation('setColor', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (((), _M_SmartHome._t_ColorRGB, False, 0),), (), ((), _M_SmartHome._t_ColorRGB, False, 0), (_M_SmartHome._t_DeviceOff,))

    _M_SmartHome.RGBSmartLight = RGBSmartLight
    del RGBSmartLight

if '_t_DeviceList' not in _M_SmartHome.__dict__:
    _M_SmartHome._t_DeviceList = IcePy.defineSequence('::SmartHome::DeviceList', (), IcePy._t_string)

_M_SmartHome._t_DeviceLister = IcePy.defineValue('::SmartHome::DeviceLister', Ice.Value, -1, (), False, True, None, ())

if 'DeviceListerPrx' not in _M_SmartHome.__dict__:
    _M_SmartHome.DeviceListerPrx = Ice.createTempClass()
    class DeviceListerPrx(Ice.ObjectPrx):

        def listDevices(self, withState, context=None):
            return _M_SmartHome.DeviceLister._op_listDevices.invoke(self, ((withState, ), context))

        def listDevicesAsync(self, withState, context=None):
            return _M_SmartHome.DeviceLister._op_listDevices.invokeAsync(self, ((withState, ), context))

        def begin_listDevices(self, withState, _response=None, _ex=None, _sent=None, context=None):
            return _M_SmartHome.DeviceLister._op_listDevices.begin(self, ((withState, ), _response, _ex, _sent, context))

        def end_listDevices(self, _r):
            return _M_SmartHome.DeviceLister._op_listDevices.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_SmartHome.DeviceListerPrx.ice_checkedCast(proxy, '::SmartHome::DeviceLister', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_SmartHome.DeviceListerPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::SmartHome::DeviceLister'
    _M_SmartHome._t_DeviceListerPrx = IcePy.defineProxy('::SmartHome::DeviceLister', DeviceListerPrx)

    _M_SmartHome.DeviceListerPrx = DeviceListerPrx
    del DeviceListerPrx

    _M_SmartHome.DeviceLister = Ice.createTempClass()
    class DeviceLister(Ice.Object):

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::SmartHome::DeviceLister')

        def ice_id(self, current=None):
            return '::SmartHome::DeviceLister'

        @staticmethod
        def ice_staticId():
            return '::SmartHome::DeviceLister'

        def listDevices(self, withState, current=None):
            raise NotImplementedError("servant method 'listDevices' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_SmartHome._t_DeviceListerDisp)

        __repr__ = __str__

    _M_SmartHome._t_DeviceListerDisp = IcePy.defineClass('::SmartHome::DeviceLister', DeviceLister, (), None, ())
    DeviceLister._ice_type = _M_SmartHome._t_DeviceListerDisp

    DeviceLister._op_listDevices = IcePy.Operation('listDevices', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (((), IcePy._t_bool, False, 0),), (), ((), _M_SmartHome._t_DeviceList, False, 0), ())

    _M_SmartHome.DeviceLister = DeviceLister
    del DeviceLister

# End of module SmartHome
